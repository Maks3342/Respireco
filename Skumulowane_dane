import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from CoolProp.HumidAirProp import HAPropsSI
import os
from datetime import timedelta

#############################################
# Kod oblicza skumulowany COP (z i bez 0.45 kW),
# a następnie rysuje 5 wykresów:
#   1) cop_z_moca_stala.svg
#   2) cop_bez_mocy_stalej.svg
#   3) t3.svg
#   4) p_ssania.svg
#   5) p_tloczenia.svg
#############################################

# Ścieżki do plików
desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
file_path1 = os.path.join(desktop_path, "DO_Raport_modified.xlsx")  # Plik 1 (22.02-10.03)
file_path2 = os.path.join(desktop_path, "doraportu_2.xlsx")         # Plik 2 (10.03-26.03)
output_base_folder = os.path.join(desktop_path, "python_test")      # Folder bazowy

# Tworzenie nowego folderu runX
if not os.path.exists(output_base_folder):
    os.makedirs(output_base_folder)
run_number = 1
while os.path.exists(os.path.join(output_base_folder, f"run{run_number}")):
    run_number += 1
output_folder = os.path.join(output_base_folder, f"run{run_number}")
os.makedirs(output_folder)
print(f"✅ Utworzono folder: {output_folder}")

#############################################
# 1) Funkcja do wczytywania danych
#############################################
def load_and_prepare_data(file_path):
    try:
        df = pd.read_excel(file_path, engine="openpyxl")
        print(f"✅ Plik {os.path.basename(file_path)} wczytany poprawnie!")

        expected_columns = [
            "t_1", "t_2", "t_3", "t_4", "t_5",
            "rh_1", "rh_2", "rh_3", "rh_4", "rh_5",
            "t_ssania", "t_tloczenie", "p_ssania", "p_tloczenia",
            "t_parowania", "t_skraplania", "Moc_Czynna",
            "Moc_Bierna", "Moc_Pozorna", "predkosc_wentylatora",
            "nast_spr", "nawiew", "wywiew"
        ]
        if len(df.columns) == len(expected_columns) + 1:
            df.columns = ["data_i_godzina"] + expected_columns
            print("✅ Nazwy kolumn poprawnie przypisane.")
            for col in ["t_1", "t_2", "t_3", "t_4", "t_5", "p_ssania", "p_tloczenia"]:
                df[col] = pd.to_numeric(df[col], errors="coerce")
        else:
            print(f"⚠️ Błąd: Oczekiwano {len(expected_columns) + 1} kolumn, a w pliku jest {len(df.columns)} kolumn.")
            return None

        df["data_i_godzina"] = pd.to_datetime(df["data_i_godzina"], format="%d.%m.%Y %H:%M:%S")
        df.set_index("data_i_godzina", inplace=True)
        return df

    except Exception as e:
        print(f"❌ Wystąpił błąd przy wczytywaniu {file_path}: {e}")
        return None

#############################################
# 2) Wczytujemy i łączymy pliki
#############################################
df1 = load_and_prepare_data(file_path1)
df2 = load_and_prepare_data(file_path2)

if df1 is not None and df2 is not None:
    df = pd.concat([df1, df2]).sort_index()
    print("✅ Dane z obu plików połączone poprawnie.")

    #########################################
    # 3) Obliczenie godzin od początku
    #########################################
    df["hours"] = (df.index - df.index[0]).total_seconds() / 3600.0

    #########################################
    # 4) Obliczanie entalpii i delta_i
    #########################################
    for i in range(1, 6):
        temp_col, rh_col, enthalpy_col = f"t_{i}", f"rh_{i}", f"i_{i}"
        if temp_col in df.columns and rh_col in df.columns:
            try:
                df[enthalpy_col] = df.apply(
                    lambda row: HAPropsSI(
                        "H", "T", row[temp_col] + 273.15,
                              "P", 101325,
                              "R", row[rh_col]
                    ) / 1000.0 if pd.notna(row[temp_col]) and pd.notna(row[rh_col]) else np.nan,
                    axis=1
                )
            except Exception as ex:
                print(f"⚠️ Błąd obliczania entalpii dla {enthalpy_col}: {ex}")
                df[enthalpy_col] = np.nan

    if "i_2" in df.columns and "i_3" in df.columns:
        df["delta_i"] = df["i_2"] - df["i_3"]
    else:
        df["delta_i"] = np.nan

    #########################################
    # 5) Obliczanie skumulowanego COP (z i bez 0.45kW)
    #########################################
    df["time_diff"] = df.index.to_series().diff().dt.total_seconds().div(3600).fillna(0)
    df["block_active"] = (df["nawiew"] == 1) | (df["wywiew"] == 1)

    # Maski
    mask_Q = (df["nast_spr"] > 0) & (df["nawiew"] == 1) & (df["wywiew"] == 0) & (df["delta_i"].notna())
    df["Q_total"] = 0.389 * df["delta_i"] * df["time_diff"] * mask_Q

    mask_P = (df["nast_spr"] > 0) & df["block_active"]
    P_mean = df["Moc_Czynna"] / 1000.0

    # P_total – z dodaną stałą 0.45 kW
    df["P_total"] = (P_mean + (df["wywiew"] == 1) * 0.45) * df["time_diff"] * mask_P
    # P_total2 – bez dodanej stałej
    df["P_total2"] = P_mean * df["time_diff"] * mask_P

    # Sumy skumulowane
    Q_cumsum = df["Q_total"].cumsum()
    P_cumsum = df["P_total"].cumsum()
    P_cumsum2 = df["P_total2"].cumsum()

    # COP z 0.45 oraz bez
    df["COP"] = Q_cumsum / P_cumsum.replace(0, np.nan)
    df["COP2"] = Q_cumsum / P_cumsum2.replace(0, np.nan)

    # Wygładzanie
    df["COP_smooth"]  = df["COP"].rolling(window=10,  min_periods=1, center=True).mean()
    df["COP2_smooth"] = df["COP2"].rolling(window=10, min_periods=1, center=True).mean()

    #########################################
    # 6) Funkcje rysujące
    #########################################
    def plot_cop_segments(x, y, moc_czynna, ylabel, title, filename):
        """
        Rysuje wykres COP (lub innej wielkości) w funkcji 'hours',
        rozdzielając okresy pracy/niepracy za pomocą stylu linii.
        W tym przykładzie, jeżeli 'Moc_Czynna' == 0 przez pewien czas,
        można np. użyć linii przerywanej.
        """
        plt.figure(figsize=(15, 6))
        threshold = 2.0  # [godziny] – minimalny czas, by uznać przerwę za dłuższą
        # Sprawdzamy, czy sprężarka pracuje
        is_off = (moc_czynna == 0)

        segments = []
        start_idx = 0
        # Dzielenie na segmenty
        for i in range(1, len(is_off)):
            if is_off.iloc[i] != is_off.iloc[i - 1]:
                segments.append((start_idx, i - 1, is_off.iloc[i - 1]))
                start_idx = i
        # ostatni segment
        segments.append((start_idx, len(is_off) - 1, is_off.iloc[-1]))

        # Rysowanie segmentów
        used_label_solid = False
        used_label_dash  = False

        for start, end, off in segments:
            seg_x = x.iloc[start:end + 1]
            seg_y = y.iloc[start:end + 1]
            seg_len_hours = seg_x.iloc[-1] - seg_x.iloc[0]

            # Jeżeli sprężarka 'off' przez dłuższy czas
            if off and seg_len_hours > threshold:
                linestyle = '--'
                label_seg = 'Przerwa (linia przerywana)' if not used_label_dash else None
                used_label_dash = True
            else:
                linestyle = '-'
                label_seg = 'Praca (linia ciągła)' if not used_label_solid else None
                used_label_solid = True

            plt.plot(seg_x, seg_y, linestyle, label=label_seg)

        plt.xlabel("Czas pracy [h]")
        plt.ylabel(ylabel)
        plt.title(title)
        plt.grid()
        plt.legend()

        # Oś X – skala co 24h
        xticks = np.arange(0, x.max() + 24, 24)
        plt.xticks(xticks, [f"{int(v)}" for v in xticks])
        plt.xlim(left=0, right=x.max())
        plt.tight_layout()
        plt.savefig(os.path.join(output_folder, filename))
        plt.close()

    def plot_single_axis(x, y, ylabel, title, filename):
        """
        Wykres prosty – jedna linia, np. T3, p_ssania lub p_tloczenia, w funkcji godzin.
        """
        plt.figure(figsize=(15, 6))
        plt.plot(x, y, label=ylabel)
        plt.xlabel("Czas pracy [h]")
        plt.ylabel(ylabel)
        plt.title(title)
        plt.grid()
        plt.legend()

        xticks = np.arange(0, x.max() + 24, 24)
        plt.xticks(xticks, [f"{int(v)}" for v in xticks])
        plt.xlim(left=0, right=x.max())
        plt.tight_layout()
        plt.savefig(os.path.join(output_folder, filename))
        plt.close()

    #########################################
    # 7) Przygotowanie serii wygładzonych
    #########################################
    t3_smooth = df["t_3"].rolling(window=10, min_periods=1, center=True).mean()
    p_ssania_smooth = df["p_ssania"].rolling(window=10, min_periods=1, center=True).mean()
    p_tloczenia_smooth = df["p_tloczenia"].rolling(window=10, min_periods=1, center=True).mean()

    #########################################
    # 8) Generowanie pięciu wykresów
    #########################################

    # 1) COP z mocą stałą 0.45 kW (skumulowany)
    plot_cop_segments(
        df["hours"],         # oś X
        df["COP_smooth"],    # oś Y – wygładzony COP
        df["Moc_Czynna"],    # do detekcji pracy/niepracy
        "COP",               # etykieta osi Y
        "COP z mocą stałą (skumulowany)",  # tytuł
        "cop_z_moca_stala.svg"
    )

    # 2) COP bez mocy stałej
    plot_cop_segments(
        df["hours"],
        df["COP2_smooth"],
        df["Moc_Czynna"],
        "COP",
        "COP bez mocy stałej (skumulowany)",
        "cop_bez_mocy_stalej.svg"
    )

    # 3) Temperatura t3
    plot_single_axis(
        df["hours"],
        t3_smooth,
        "Temperatura T3 [°C]",
        "Temperatura T3 (wygładzona)",
        "t3.svg"
    )

    # 4) Ciśnienie ssania
    plot_single_axis(
        df["hours"],
        p_ssania_smooth,
        "Ciśnienie ssania [bar]",
        "Ciśnienie ssania (wygładzone)",
        "p_ssania.svg"
    )

    # 5) Ciśnienie tłoczenia
    plot_single_axis(
        df["hours"],
        p_tloczenia_smooth,
        "Ciśnienie tłoczenia [bar]",
        "Ciśnienie tłoczenia (wygładzone)",
        "p_tloczenia.svg"
    )

    print(f"✅ Wygenerowano wszystkie wykresy w folderze: {output_folder}")

else:
    print("❌ Nie można kontynuować obliczeń z powodu błędów w wczytywaniu danych.")

